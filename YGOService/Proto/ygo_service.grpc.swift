// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: ygo_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - ygo.CardService

/// Namespace containing generated types for the "ygo.CardService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Ygo_CardService {
    /// Service descriptor for the "ygo.CardService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetCardColors" metadata.
        internal enum GetCardColors {
            /// Request type for "GetCardColors".
            internal typealias Input = SwiftProtobuf.Google_Protobuf_Empty
            /// Response type for "GetCardColors".
            internal typealias Output = Ygo_CardColors
            /// Descriptor for "GetCardColors".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetCardColors"
            )
        }
        /// Namespace for "GetCardByID" metadata.
        internal enum GetCardByID {
            /// Request type for "GetCardByID".
            internal typealias Input = Ygo_Common_ResourceID
            /// Response type for "GetCardByID".
            internal typealias Output = Ygo_Card
            /// Descriptor for "GetCardByID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetCardByID"
            )
        }
        /// Namespace for "GetCardsByID" metadata.
        internal enum GetCardsByID {
            /// Request type for "GetCardsByID".
            internal typealias Input = Ygo_Common_ResourceIDs
            /// Response type for "GetCardsByID".
            internal typealias Output = Ygo_Cards
            /// Descriptor for "GetCardsByID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetCardsByID"
            )
        }
        /// Namespace for "GetCardsByName" metadata.
        internal enum GetCardsByName {
            /// Request type for "GetCardsByName".
            internal typealias Input = Ygo_Common_ResourceNames
            /// Response type for "GetCardsByName".
            internal typealias Output = Ygo_Cards
            /// Descriptor for "GetCardsByName".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetCardsByName"
            )
        }
        /// Namespace for "GetCardsReferencingNameInEffect" metadata.
        internal enum GetCardsReferencingNameInEffect {
            /// Request type for "GetCardsReferencingNameInEffect".
            internal typealias Input = Ygo_Common_ResourceNames
            /// Response type for "GetCardsReferencingNameInEffect".
            internal typealias Output = Ygo_CardList
            /// Descriptor for "GetCardsReferencingNameInEffect".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetCardsReferencingNameInEffect"
            )
        }
        /// Namespace for "GetArchetypalCardsUsingCardName" metadata.
        internal enum GetArchetypalCardsUsingCardName {
            /// Request type for "GetArchetypalCardsUsingCardName".
            internal typealias Input = Ygo_Common_Archetype
            /// Response type for "GetArchetypalCardsUsingCardName".
            internal typealias Output = Ygo_CardList
            /// Descriptor for "GetArchetypalCardsUsingCardName".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetArchetypalCardsUsingCardName"
            )
        }
        /// Namespace for "GetExplicitArchetypalInclusions" metadata.
        internal enum GetExplicitArchetypalInclusions {
            /// Request type for "GetExplicitArchetypalInclusions".
            internal typealias Input = Ygo_Common_Archetype
            /// Response type for "GetExplicitArchetypalInclusions".
            internal typealias Output = Ygo_CardList
            /// Descriptor for "GetExplicitArchetypalInclusions".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetExplicitArchetypalInclusions"
            )
        }
        /// Namespace for "GetExplicitArchetypalExclusions" metadata.
        internal enum GetExplicitArchetypalExclusions {
            /// Request type for "GetExplicitArchetypalExclusions".
            internal typealias Input = Ygo_Common_Archetype
            /// Response type for "GetExplicitArchetypalExclusions".
            internal typealias Output = Ygo_CardList
            /// Descriptor for "GetExplicitArchetypalExclusions".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetExplicitArchetypalExclusions"
            )
        }
        /// Namespace for "GetRandomCard" metadata.
        internal enum GetRandomCard {
            /// Request type for "GetRandomCard".
            internal typealias Input = Ygo_Common_BlackListed
            /// Response type for "GetRandomCard".
            internal typealias Output = Ygo_Card
            /// Descriptor for "GetRandomCard".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService"),
                method: "GetRandomCard"
            )
        }
        /// Descriptors for all methods in the "ygo.CardService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetCardColors.descriptor,
            GetCardByID.descriptor,
            GetCardsByID.descriptor,
            GetCardsByName.descriptor,
            GetCardsReferencingNameInEffect.descriptor,
            GetArchetypalCardsUsingCardName.descriptor,
            GetExplicitArchetypalInclusions.descriptor,
            GetExplicitArchetypalExclusions.descriptor,
            GetRandomCard.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "ygo.CardService" service.
    internal static let ygo_CardService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.CardService")
}

// MARK: ygo.CardService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_CardService {
    /// Generated client protocol for the "ygo.CardService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetCardColors" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `Ygo_CardColors` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardColors<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardColors>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardColors>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_Card` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Card>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardsByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_Cards` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardsByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Cards>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardsByName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceNames` messages.
        ///   - deserializer: A deserializer for `Ygo_Cards` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardsByName<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceNames>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Cards>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardsReferencingNameInEffect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceNames` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardsReferencingNameInEffect<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceNames>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetArchetypalCardsUsingCardName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getArchetypalCardsUsingCardName<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetExplicitArchetypalInclusions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getExplicitArchetypalInclusions<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetExplicitArchetypalExclusions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getExplicitArchetypalExclusions<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetRandomCard" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_BlackListed` message.
        ///   - serializer: A serializer for `Ygo_Common_BlackListed` messages.
        ///   - deserializer: A deserializer for `Ygo_Card` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getRandomCard<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_BlackListed>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_BlackListed>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Card>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "ygo.CardService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetCardColors" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `Ygo_CardColors` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardColors<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardColors>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardColors>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetCardColors.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_Card` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Card>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetCardByID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardsByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_Cards` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardsByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Cards>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetCardsByID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardsByName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceNames` messages.
        ///   - deserializer: A deserializer for `Ygo_Cards` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardsByName<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceNames>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Cards>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetCardsByName.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardsReferencingNameInEffect" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceNames` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardsReferencingNameInEffect<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceNames>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetCardsReferencingNameInEffect.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetArchetypalCardsUsingCardName" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getArchetypalCardsUsingCardName<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetArchetypalCardsUsingCardName.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetExplicitArchetypalInclusions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getExplicitArchetypalInclusions<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetExplicitArchetypalInclusions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetExplicitArchetypalExclusions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_Archetype` message.
        ///   - serializer: A serializer for `Ygo_Common_Archetype` messages.
        ///   - deserializer: A deserializer for `Ygo_CardList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getExplicitArchetypalExclusions<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_Archetype>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetExplicitArchetypalExclusions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetRandomCard" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_BlackListed` message.
        ///   - serializer: A serializer for `Ygo_Common_BlackListed` messages.
        ///   - deserializer: A deserializer for `Ygo_Card` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getRandomCard<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_BlackListed>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_BlackListed>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Card>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_CardService.Method.GetRandomCard.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_CardService.ClientProtocol {
    /// Call the "GetCardColors" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardColors<Result>(
        request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardColors>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardColors(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardColors>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardByID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardByID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardByID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceID>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Card>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsByID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardsByID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceIDs>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Cards>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsByName" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByName<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardsByName(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceNames>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Cards>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsReferencingNameInEffect" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceNames` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsReferencingNameInEffect<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceNames>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardsReferencingNameInEffect(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceNames>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetArchetypalCardsUsingCardName" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_Archetype` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getArchetypalCardsUsingCardName<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getArchetypalCardsUsingCardName(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_Archetype>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExplicitArchetypalInclusions" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_Archetype` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getExplicitArchetypalInclusions<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getExplicitArchetypalInclusions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_Archetype>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExplicitArchetypalExclusions" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_Archetype` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getExplicitArchetypalExclusions<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_Archetype>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getExplicitArchetypalExclusions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_Archetype>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRandomCard" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_BlackListed` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getRandomCard<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_BlackListed>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getRandomCard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_BlackListed>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Card>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_CardService.ClientProtocol {
    /// Call the "GetCardColors" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardColors<Result>(
        _ message: SwiftProtobuf.Google_Protobuf_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardColors>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardColors(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardByID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardByID<Result>(
        _ message: Ygo_Common_ResourceID,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceID>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardByID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsByID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByID<Result>(
        _ message: Ygo_Common_ResourceIDs,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardsByID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsByName" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByName<Result>(
        _ message: Ygo_Common_ResourceNames,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Cards>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceNames>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardsByName(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardsReferencingNameInEffect" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsReferencingNameInEffect<Result>(
        _ message: Ygo_Common_ResourceNames,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceNames>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardsReferencingNameInEffect(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetArchetypalCardsUsingCardName" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getArchetypalCardsUsingCardName<Result>(
        _ message: Ygo_Common_Archetype,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_Archetype>(
            message: message,
            metadata: metadata
        )
        return try await self.getArchetypalCardsUsingCardName(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExplicitArchetypalInclusions" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getExplicitArchetypalInclusions<Result>(
        _ message: Ygo_Common_Archetype,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_Archetype>(
            message: message,
            metadata: metadata
        )
        return try await self.getExplicitArchetypalInclusions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExplicitArchetypalExclusions" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getExplicitArchetypalExclusions<Result>(
        _ message: Ygo_Common_Archetype,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_Archetype>(
            message: message,
            metadata: metadata
        )
        return try await self.getExplicitArchetypalExclusions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRandomCard" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getRandomCard<Result>(
        _ message: Ygo_Common_BlackListed,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Card>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_BlackListed>(
            message: message,
            metadata: metadata
        )
        return try await self.getRandomCard(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - ygo.ProductService

/// Namespace containing generated types for the "ygo.ProductService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Ygo_ProductService {
    /// Service descriptor for the "ygo.ProductService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ProductService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetCardsByProductID" metadata.
        internal enum GetCardsByProductID {
            /// Request type for "GetCardsByProductID".
            internal typealias Input = Ygo_Common_ResourceID
            /// Response type for "GetCardsByProductID".
            internal typealias Output = Ygo_Product
            /// Descriptor for "GetCardsByProductID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ProductService"),
                method: "GetCardsByProductID"
            )
        }
        /// Namespace for "GetProductSummaryByID" metadata.
        internal enum GetProductSummaryByID {
            /// Request type for "GetProductSummaryByID".
            internal typealias Input = Ygo_Common_ResourceID
            /// Response type for "GetProductSummaryByID".
            internal typealias Output = Ygo_ProductSummary
            /// Descriptor for "GetProductSummaryByID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ProductService"),
                method: "GetProductSummaryByID"
            )
        }
        /// Namespace for "GetProductsSummaryByID" metadata.
        internal enum GetProductsSummaryByID {
            /// Request type for "GetProductsSummaryByID".
            internal typealias Input = Ygo_Common_ResourceIDs
            /// Response type for "GetProductsSummaryByID".
            internal typealias Output = Ygo_Products
            /// Descriptor for "GetProductsSummaryByID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ProductService"),
                method: "GetProductsSummaryByID"
            )
        }
        /// Descriptors for all methods in the "ygo.ProductService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetCardsByProductID.descriptor,
            GetProductSummaryByID.descriptor,
            GetProductsSummaryByID.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "ygo.ProductService" service.
    internal static let ygo_ProductService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ProductService")
}

// MARK: ygo.ProductService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ProductService {
    /// Generated client protocol for the "ygo.ProductService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetCardsByProductID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_Product` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardsByProductID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Product>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Product>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetProductSummaryByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_ProductSummary` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getProductSummaryByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_ProductSummary>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_ProductSummary>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetProductsSummaryByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_Products` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getProductsSummaryByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Products>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Products>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "ygo.ProductService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetCardsByProductID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_Product` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardsByProductID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Product>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Product>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ProductService.Method.GetCardsByProductID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetProductSummaryByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_ProductSummary` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getProductSummaryByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_ProductSummary>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_ProductSummary>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ProductService.Method.GetProductSummaryByID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetProductsSummaryByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_Products` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getProductsSummaryByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Products>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Products>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ProductService.Method.GetProductsSummaryByID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ProductService.ClientProtocol {
    /// Call the "GetCardsByProductID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByProductID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Product>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardsByProductID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceID>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Product>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetProductSummaryByID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getProductSummaryByID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_ProductSummary>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getProductSummaryByID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceID>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_ProductSummary>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetProductsSummaryByID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getProductsSummaryByID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Products>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getProductsSummaryByID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceIDs>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Products>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ProductService.ClientProtocol {
    /// Call the "GetCardsByProductID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardsByProductID<Result>(
        _ message: Ygo_Common_ResourceID,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Product>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceID>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardsByProductID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetProductSummaryByID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getProductSummaryByID<Result>(
        _ message: Ygo_Common_ResourceID,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_ProductSummary>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceID>(
            message: message,
            metadata: metadata
        )
        return try await self.getProductSummaryByID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetProductsSummaryByID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getProductsSummaryByID<Result>(
        _ message: Ygo_Common_ResourceIDs,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Products>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>(
            message: message,
            metadata: metadata
        )
        return try await self.getProductsSummaryByID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - ygo.ScoreService

/// Namespace containing generated types for the "ygo.ScoreService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Ygo_ScoreService {
    /// Service descriptor for the "ygo.ScoreService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetDatesForFormat" metadata.
        internal enum GetDatesForFormat {
            /// Request type for "GetDatesForFormat".
            internal typealias Input = Ygo_Format
            /// Response type for "GetDatesForFormat".
            internal typealias Output = Ygo_Common_Dates
            /// Descriptor for "GetDatesForFormat".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService"),
                method: "GetDatesForFormat"
            )
        }
        /// Namespace for "GetScoresForFormat" metadata.
        internal enum GetScoresForFormat {
            /// Request type for "GetScoresForFormat".
            internal typealias Input = Ygo_Format
            /// Response type for "GetScoresForFormat".
            internal typealias Output = Ygo_Common_Dates
            /// Descriptor for "GetScoresForFormat".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService"),
                method: "GetScoresForFormat"
            )
        }
        /// Namespace for "GetCardScoreByID" metadata.
        internal enum GetCardScoreByID {
            /// Request type for "GetCardScoreByID".
            internal typealias Input = Ygo_Common_ResourceID
            /// Response type for "GetCardScoreByID".
            internal typealias Output = Ygo_CardScore
            /// Descriptor for "GetCardScoreByID".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService"),
                method: "GetCardScoreByID"
            )
        }
        /// Namespace for "GetCardScoresByIDs" metadata.
        internal enum GetCardScoresByIDs {
            /// Request type for "GetCardScoresByIDs".
            internal typealias Input = Ygo_Common_ResourceIDs
            /// Response type for "GetCardScoresByIDs".
            internal typealias Output = Ygo_CardScores
            /// Descriptor for "GetCardScoresByIDs".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService"),
                method: "GetCardScoresByIDs"
            )
        }
        /// Descriptors for all methods in the "ygo.ScoreService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetDatesForFormat.descriptor,
            GetScoresForFormat.descriptor,
            GetCardScoreByID.descriptor,
            GetCardScoresByIDs.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "ygo.ScoreService" service.
    internal static let ygo_ScoreService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "ygo.ScoreService")
}

// MARK: ygo.ScoreService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ScoreService {
    /// Generated client protocol for the "ygo.ScoreService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetDatesForFormat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Format` message.
        ///   - serializer: A serializer for `Ygo_Format` messages.
        ///   - deserializer: A deserializer for `Ygo_Common_Dates` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDatesForFormat<Result>(
            request: GRPCCore.ClientRequest<Ygo_Format>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Format>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Common_Dates>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetScoresForFormat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Format` message.
        ///   - serializer: A serializer for `Ygo_Format` messages.
        ///   - deserializer: A deserializer for `Ygo_Common_Dates` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getScoresForFormat<Result>(
            request: GRPCCore.ClientRequest<Ygo_Format>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Format>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Common_Dates>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardScoreByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_CardScore` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardScoreByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardScore>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScore>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCardScoresByIDs" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_CardScores` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCardScoresByIDs<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardScores>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScores>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "ygo.ScoreService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetDatesForFormat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Format` message.
        ///   - serializer: A serializer for `Ygo_Format` messages.
        ///   - deserializer: A deserializer for `Ygo_Common_Dates` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getDatesForFormat<Result>(
            request: GRPCCore.ClientRequest<Ygo_Format>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Format>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Common_Dates>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ScoreService.Method.GetDatesForFormat.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetScoresForFormat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Format` message.
        ///   - serializer: A serializer for `Ygo_Format` messages.
        ///   - deserializer: A deserializer for `Ygo_Common_Dates` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getScoresForFormat<Result>(
            request: GRPCCore.ClientRequest<Ygo_Format>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Format>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_Common_Dates>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ScoreService.Method.GetScoresForFormat.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardScoreByID" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceID` messages.
        ///   - deserializer: A deserializer for `Ygo_CardScore` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardScoreByID<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceID>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardScore>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScore>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ScoreService.Method.GetCardScoreByID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCardScoresByIDs" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
        ///   - serializer: A serializer for `Ygo_Common_ResourceIDs` messages.
        ///   - deserializer: A deserializer for `Ygo_CardScores` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getCardScoresByIDs<Result>(
            request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
            serializer: some GRPCCore.MessageSerializer<Ygo_Common_ResourceIDs>,
            deserializer: some GRPCCore.MessageDeserializer<Ygo_CardScores>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScores>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Ygo_ScoreService.Method.GetCardScoresByIDs.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ScoreService.ClientProtocol {
    /// Call the "GetDatesForFormat" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Format` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDatesForFormat<Result>(
        request: GRPCCore.ClientRequest<Ygo_Format>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDatesForFormat(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Format>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Common_Dates>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetScoresForFormat" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Format` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getScoresForFormat<Result>(
        request: GRPCCore.ClientRequest<Ygo_Format>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getScoresForFormat(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Format>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_Common_Dates>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardScoreByID" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceID` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardScoreByID<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceID>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScore>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardScoreByID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceID>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardScore>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardScoresByIDs" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Ygo_Common_ResourceIDs` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardScoresByIDs<Result>(
        request: GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScores>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCardScoresByIDs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Ygo_Common_ResourceIDs>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Ygo_CardScores>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Ygo_ScoreService.ClientProtocol {
    /// Call the "GetDatesForFormat" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDatesForFormat<Result>(
        _ message: Ygo_Format,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Format>(
            message: message,
            metadata: metadata
        )
        return try await self.getDatesForFormat(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetScoresForFormat" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getScoresForFormat<Result>(
        _ message: Ygo_Format,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_Common_Dates>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Format>(
            message: message,
            metadata: metadata
        )
        return try await self.getScoresForFormat(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardScoreByID" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardScoreByID<Result>(
        _ message: Ygo_Common_ResourceID,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScore>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceID>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardScoreByID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCardScoresByIDs" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getCardScoresByIDs<Result>(
        _ message: Ygo_Common_ResourceIDs,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Ygo_CardScores>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Ygo_Common_ResourceIDs>(
            message: message,
            metadata: metadata
        )
        return try await self.getCardScoresByIDs(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}